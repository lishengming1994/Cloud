/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.controller;

import com.example.bean.CreateVolumeRequestBody;
import com.example.bean.CreateVolumeResponseBody;
import com.example.bean.Volume;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-05T11:25:12.074+08:00[GMT+08:00]")
@Validated
@Api(value = "volume", description = "the volume API")
public interface VolumeApi {

    /**
     * POST /volume : 创建卷
     * 创建卷
     *
     * @param createVolumeRequestBody  (required)
     * @return 操作成功 (status code 200)
     *         or 服务未找到 (status code 404)
     */
    @ApiOperation(value = "创建卷", nickname = "createVolume", notes = "创建卷", response = CreateVolumeResponseBody.class, tags={ "Volumes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = CreateVolumeResponseBody.class),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @PostMapping(
        value = "/volume",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<CreateVolumeResponseBody>> _createVolume(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<CreateVolumeRequestBody> createVolumeRequestBody, @ApiIgnore final ServerWebExchange exchange) {
        return createVolume(createVolumeRequestBody, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<CreateVolumeResponseBody>> createVolume(Mono<CreateVolumeRequestBody> createVolumeRequestBody, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"volume_id\" : 0 }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /volume/{volumeId} : 根据卷id获取卷详情
     * 若已经同步到主站，详情包括同步补充信息
     *
     * @param volumeId 卷id (required)
     * @return 操作成功 (status code 200)
     *         or 资源未找到 (status code 404)
     */
    @ApiOperation(value = "根据卷id获取卷详情", nickname = "getVolumeDetail", notes = "若已经同步到主站，详情包括同步补充信息", response = Volume.class, tags={ "Volume", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = Volume.class),
        @ApiResponse(code = 404, message = "资源未找到", response = String.class) })
    @GetMapping(
        value = "/volume/{volumeId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Volume>> _getVolumeDetail(@ApiParam(value = "卷id",required=true) @PathVariable("volumeId") Long volumeId, @ApiIgnore final ServerWebExchange exchange) {
        return getVolumeDetail(volumeId, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Volume>> getVolumeDetail(Long volumeId, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"storage_type\" : \"SSD\", \"volume_id\" : 0, \"size\" : 6, \"createTime\" : \"2000-01-23T04:56:07.000+00:00\", \"volume_name\" : \"volume_name\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
